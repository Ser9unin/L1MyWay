package main

import "fmt"

// Чтобы реализовать бинарный поиск в Go, вы можете использовать следующий подход:
// Создайте функцию binarySearch, которая принимает два параметра: массив arr и искомое значение target.
// Внутри функции инициализируйте переменные low и high значениями первого и последнего индекса массива соответственно.
// В цикле for проверяйте, находится ли искомое значение в массиве. Если да, верните индекс элемента. Если нет, продолжайте поиск.
// Вычислите средний индекс массива с помощью выражения (low + high) / 2.
// Сравните элемент массива по среднему индексу с искомым значением. Если они равны, верните индекс.
// Если элемент массива меньше искомого значения, обновите high до среднего индекса минус 1.
// Если элемент массива больше искомого значения, обновите low до среднего индекса плюс 1.
// Повторяйте шаги 4-7, пока low не станет больше high.
// Если цикл завершился без нахождения искомого значения, верните -1.

func binarySearch(s []int, target int) int {
	low := 0
	high := len(s) - 1
	for low <= high {
		mid := (low + high) / 2
		if s[mid] == target {
			return mid
		} else if s[mid] < target {
			low = mid + 1
		} else {
			high = mid - 1
		}
	}
	return -1
}

// Адаптивный бинарный поиск — это модификация классического бинарного поиска, которая позволяет ускорить процесс поиска, адаптируя шаг поиска в зависимости от результатов предыдущих итераций. Это особенно полезно, когда элементы в массиве распределены неравномерно.
// Алгоритм адаптивного бинарного поиска:
// Инициализация границ поиска: left = 0, right = length(A) - 1.
// Вычисление среднего элемента: mid = left + (right - left) / 2.
// Сравнение среднего элемента с искомым значением:
// Если A[mid] == x, вернуть mid.
// Если A[mid] > x, установить right = mid - 1.
// Если A[mid] < x, установить left = mid + 1.
// Если left > right, элемент не найден, вернуть -1.
// Перейти к шагу 2.
// Адаптивный бинарный поиск — это модификация классического бинарного поиска,
// которая позволяет ускорить процесс поиска за счёт адаптации шага поиска в зависимости от результатов предыдущих итераций.
// Основная идея адаптивного бинарного поиска заключается в том,
// чтобы изменять размер шага поиска в зависимости от того,
// насколько близко текущий элемент к искомому значению.
// Если текущий элемент близок к искомому значению, то шаг поиска уменьшается,
// чтобы более точно определить местоположение элемента.
// Если текущий элемент далёк от искомого значения, то шаг поиска увеличивается, чтобы пропустить ненужные элементы.

func adaptiveBinarySearch(s []int, target int) int {
	low := 0
	high := len(s) - 1
	step := 1
	for low <= high {
		smid := (low + high) / 2
		if smid == target {
			return smid
		} else if smid < target {
			low = smid + step
			step /= 2
		} else {
			high = smid - step
			step /= 2
		}
	}
	return -1
}

func main() {
	items := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
	fmt.Println(binarySearch(items, 6))         // Выведет 5
	fmt.Println(adaptiveBinarySearch(items, 6)) // Выведет 5
}
