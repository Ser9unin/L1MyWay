package main

import (
	"fmt"
)

func qsort(arr []int, left, right int, isIncrease bool) {
	// если массив пустой или там один элемент возвращаем массив как есть
	if len(arr) < 2 {
		return
	}
	// если левый оказался больше правого - выходим из сортировки, так мы завершаем рекурсию
	if left > right {
		return
	}

	// выбираем опорный элемент
	pivotIndex := arr[(left+right)/2]
	i := left
	j := right
	// если выбрали сортировку по возрастанию
	if isIncrease {
		// пока i <= j сравниваем элемент массива и опорный элемент
		for i <= j {
			// если элемент массива меньше опорного, перемещаем индекс i вправо к опорному элементу
			for arr[i] < pivotIndex {
				i++
			}
			// если элемент j массива больше опорного, перемещаем индекс j влево, к опорному элементу
			for arr[j] > pivotIndex {
				j--
			}
			// перемещения индексов остановились значит мы достигли элементов которые не отвечают условиям выше
			// если при этом i <= j меняем местами элементы с этими индексами
			// если нет, выходим из цикла
			if i <= j {
				arr[i], arr[j] = arr[j], arr[i]
				i++
				j--
			}
		}
	} else {
		for i <= j {
			for arr[i] > pivotIndex {
				i++
			}
			for arr[j] < pivotIndex {
				j--
			}
			if i <= j {
				arr[i], arr[j] = arr[j], arr[i]
				i++
				j--
			}
		}
	}

	// рекурсивно запускаем сортировку
	qsort(arr, left, j, isIncrease)
	qsort(arr, i, right, isIncrease)
}

func main() {
	// по убыванию
	arr := []int{-4, -9, 2, 4, 1, 0, 2, -5, 8, -3, 10, 9}
	// левый элемент выставляем в 0, правый на последний элемент массива
	left, right := 0, len(arr)-1
	// так как массив передаётся по ссылке, запускаю qsort не возвращая ничего оттуда, в результате мы получим отсортированный массив
	qsort(arr, left, right, false)
	fmt.Println("Сортировка по убыванию:", arr)

	// по возрастанию
	arr = []int{-4, -9, 2, 4, 1, 0, 2, -5, 8, -3, 10, 9}
	qsort(arr, left, right, true)
	fmt.Println("Сортировка по возрастанию:", arr)
}
